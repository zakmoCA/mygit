#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)
require "digest"
require "time"
require "mygit/mygit_objects"

MYGIT_DIR = "#{Dir.pwd}/.mygit".freeze
OBJECTS_DIR = "#{MYGIT_DIR}/objects".freeze
INDEX_PATH = "#{MYGIT_DIR}/index"
COMMIT_MESSAGE_TEMPLATE = <<-TXT
# Title
#
# Body
TXT

def mygit_commit
  unless index_files.any?
    $stderr.puts "Nothing to commit"
    exit 1
  end

  begin
    tree = index_tree
    root_sha = build_tree("root", tree)
    commit_sha = build_commit(tree: root_sha)

    if commit_sha
      update_ref(commit_sha: commit_sha)
      clear_index
      puts "Created commit #{commit_sha[0..6]}"
    else
      $stderr.puts "Failed to create commit"
      exit 1
    end
  rescue StandardError => e
    $stderr.puts "Error: #{e.message}"
    exit 1
  end
end

def index_files
  return [] unless File.exist?(INDEX_PATH)
  File.open(INDEX_PATH).each_line
end

def index_tree
  index_lines = index_files.to_a
  return unless index_lines.any?

  index_lines.each_with_object({}) do |line, object|
    line_parts = line.split
    next unless line_parts.size >= 2

    sha = line_parts[0]
    path = line_parts[1..-1].join(" ") # spaces handling

    segments = path.split("/")
    current = object

    # nav/create tree struct
    segments[0...-1].each do |segment|
      current[segment] ||= {}
      current = current[segment]
    end

    # file to tree
    current[segments.last] = sha
  end
end

def build_tree(name, tree)
  return nil unless tree

  tree_content = ""

  tree.each do |key, value|
    if value.is_a?(Hash)
      # subtree
      subtree_sha = build_tree(key, value)
      tree_content << "tree #{subtree_sha} #{key}\n"
    else
      # blob
      tree_content << "blob #{value} #{key}\n"
    end
  end

  # content-based SHA
  content = "tree #{tree_content.bytesize}\0#{tree_content}"
  sha = Digest::SHA1.hexdigest(content)

  # tree obj store
  object_dir = "#{OBJECTS_DIR}/#{sha[0..1]}"
  FileUtils.mkdir_p object_dir
  object_path = "#{object_dir}/#{sha[2..-1]}"

  blob = Zlib::Deflate.deflate(content)
  File.open(object_path, "wb") do |file|
    file.write blob
  end

  sha
end

def build_commit(tree:)
  return nil unless tree

  commit_message_path = "#{MYGIT_DIR}/COMMIT_EDIT_MESSAGE"
  `echo "#{COMMIT_MESSAGE_TEMPLATE}" > #{commit_message_path}`
  `$VISUAL #{commit_message_path} > /dev/tty`
  commit_message = File.read(commit_message_path).strip

  if commit_message.empty? || commit_message == COMMIT_MESSAGE_TEMPLATE.strip
    $stderr.puts "Aborting commit due to empty commit message"
    return nil
  end

  author = ENV["USER"] || "user"
  timestamp = Time.now.to_i
  timezone = Time.now.strftime("%z")

  # parent commit
  parent = nil
  current_branch = File.read("#{MYGIT_DIR}/HEAD").strip.split.last
  parent_path = "#{MYGIT_DIR}/#{current_branch}"
  parent = File.read(parent_path).strip if File.exist?(parent_path)

  # Build commit content
  commit_content = ""
  commit_content << "tree #{tree}\n"
  commit_content << "parent #{parent}\n" if parent
  commit_content << "author #{author} #{timestamp} #{timezone}\n"
  commit_content << "committer #{author} #{timestamp} #{timezone}\n"
  commit_content << "\n"
  commit_content << commit_message

  # create commit obj with proper format
  content = "commit #{commit_content.bytesize}\0#{commit_content}"
  sha = Digest::SHA1.hexdigest(content)

  # store
  object_dir = "#{OBJECTS_DIR}/#{sha[0..1]}"
  FileUtils.mkdir_p object_dir
  object_path = "#{object_dir}/#{sha[2..-1]}"

  blob = Zlib::Deflate.deflate(content)
  File.open(object_path, "wb") do |file|
    file.write blob
  end

  sha
end

def update_ref(commit_sha:)
  current_branch = File.read("#{MYGIT_DIR}/HEAD").strip.split.last
  branch_path = "#{MYGIT_DIR}/#{current_branch}"

  branch_dir = File.dirname(branch_path)
  FileUtils.mkdir_p(branch_dir) unless Dir.exist?(branch_dir)

  File.open(branch_path, "w") do |file|
    file.print commit_sha
  end
end

def clear_index
  File.truncate(INDEX_PATH, 0) if File.exist?(INDEX_PATH)
end

mygit_commit
